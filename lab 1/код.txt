import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import quad

# Define the number of terms in the Fourier series
N = 18

# Define the left and right boundaries of the interval
left_boundary = -np.pi
right_boundary = np.pi

# Define the left and right boundaries of the graph
graph_left_boundary = -3 * np.pi
graph_right_boundary = 3 * np.pi

# Calculate the length of the interval
interval_length = (right_boundary - left_boundary) / 2

# Create an array of 1000 evenly spaced points between the left and right boundaries
x = np.linspace(left_boundary, right_boundary, 1000)


# Define the function to be approximated
def f(x):
    return N * np.sin(N * np.pi * x)


# Define the integral expression used to calculate the Fourier coefficients
def integral_expression(x, k):
    return f(x) * np.sin(np.pi * k * x / interval_length)


# Plot the original function
def plot_function():
    fig, ax = plt.subplots()
    plt.plot(x, f(x))
    ax.set_title('Graph of function 17*sin(17*x*pi) in the interval ({},{})'.format(graph_left_boundary.__round__(2),
                                                                                    graph_right_boundary.__round__(2)))
    ax.grid()
    plt.show()


# Calculate the Fourier coefficients
def calculate_fourier_coefficients(N):

    a_0 = 0
    a_k = np.zeros(N)
    b_k = np.zeros(N)
    for k in range(1, N + 1):
        b_k[k - 1] = 2 / interval_length * quad(integral_expression, 0, interval_length, args=(k,))[0]
    print("\nCalculating values of a_k and b_k where N=17")
    for i in range(N):
        print(f"{i+1}\t\t{a_k[i]}\t\t\t\t\t{b_k[i]}")
    return a_0, a_k, b_k


# Calculate the Fourier series approximation of the function
def calculate_fourier_series(N, b_k, x_i=x):
    sum = 0
    for k in range(1, N + 1):
        sum += b_k[k - 1] * np.sin(np.pi * k * x_i / interval_length)
    return sum


# Plot the Fourier series approximation of the function
def plot_approximation(N, b_k):
    fig, ax = plt.subplots()
    ax.set_title('Graph of approximation in the interval ({},{})'.format(graph_left_boundary.__round__(2),
                                                                         graph_right_boundary.__round__(2)))
    for n in range(1, N + 1):
        y = calculate_fourier_series(n, b_k)
        plt.plot(x, y, label=f"N={n}")
    plt.legend(loc='upper right', fontsize='xx-small')
    ax.grid()
    plt.show()


# Plot the harmonic coefficients
def plot_harmonics(a_k, b_k):
    fig, axs = plt.subplots(2, figsize=(8, 8))
    axs[0].stem([0] + a_k)
    axs[0].set_xlabel('k')
    axs[0].set_ylabel('a(k)')
    axs[0].set_title('Graph of harmonics for a_k')
    axs[1].set_xlabel('k')
    axs[1].stem(range(1, N + 1), b_k)
    axs[1].set_ylabel('b(k)')
    axs[1].set_title('Graph of harmonics for b_k')
    axs[1].set_xticks(range(1, N + 1))
    axs[1].set_xticklabels([f'{i}' for i in range(1, N + 1)])
    plt.tight_layout()
    plt.show()


# Calculate the relative error of the Fourier series approximation
def calculate_approximation_relative_error(N, b_k):
    # Calculate the Fourier series approximation and exact function values at each point in the interval
    y_approx = [calculate_fourier_series(N, b_k, x_i) for x_i in x]
    y_exact = [f(x_i) for x_i in x]

    # Calculate the relative error at each point
    relative_error = []
    for i in range(0, len(x)):
        relative_error.append(np.abs((y_approx[i] - y_exact[i]) / (y_exact[i] + 1e-10)))

    # Plot the relative error
    fig, ax = plt.subplots()
    ax.plot(x, relative_error)
    ax.set_title('Approximation error')
    ax.grid()
    plt.show()

    return relative_error


# Plot the original function
plot_function()

# Calculate the Fourier coefficients
a_0, a_k, b_k = calculate_fourier_coefficients(N)

# Plot the Fourier series approximation of the function
plot_approximation(N, b_k)

# Plot the harmonic coefficients
plot_harmonics(a_k, b_k)

# Calculate the relative error of the Fourier series approximation
relative_error = calculate_approximation_relative_error(N, b_k)

# Save the results to a file

with open('fourier_series_results.txt', 'w') as file:
    file.write('N = {}\n'.format(N))
    file.write('a_0 = {}\n'.format(a_0))
    file.write('a_k\tb_k\n')  # заголовок стовпчика
    for i in range(1, len(a_k)):
        file.write('{}\t{}\n'.format(a_k[i], b_k[i]))  # записуємо кожний елемент у стовпчик
    file.write('Похибка наближення = {}\n'.format(relative_error))










